// <auto-generated />
using System;
using CustomerServiceApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CustomerServiceApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CustomerServiceApi.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AddressId"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("AddressId");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("StateId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("CustomerServiceApi.Models.AddressType", b =>
                {
                    b.Property<int>("AddressTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AddressTypeId"));

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("AddressTypeId");

                    b.HasIndex("ClientId");

                    b.ToTable("AddressTypes");

                    b.HasData(
                        new
                        {
                            AddressTypeId = 1,
                            ClientId = new Guid("e8094495-8504-422d-87b0-29c9baf4df7e"),
                            Description = "Home",
                            Name = "Home"
                        },
                        new
                        {
                            AddressTypeId = 2,
                            ClientId = new Guid("e8094495-8504-422d-87b0-29c9baf4df7e"),
                            Description = "Work",
                            Name = "Work"
                        },
                        new
                        {
                            AddressTypeId = 3,
                            ClientId = new Guid("e8094495-8504-422d-87b0-29c9baf4df7e"),
                            Description = "Vacation",
                            Name = "Vacation"
                        },
                        new
                        {
                            AddressTypeId = 4,
                            ClientId = new Guid("e8094495-8504-422d-87b0-29c9baf4df7e"),
                            Description = "Other",
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("CustomerServiceApi.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CustomerServiceApi.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AppointmentId"));

                    b.Property<bool>("AllDay")
                        .HasColumnType("boolean");

                    b.Property<int>("AppointmentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AppointmentId");

                    b.HasIndex("AppointmentTypeId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("CustomerServiceApi.Models.AppointmentType", b =>
                {
                    b.Property<int>("AppointmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AppointmentTypeId"));

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("AppointmentTypeId");

                    b.HasIndex("ClientId");

                    b.ToTable("AppointmentTypes");

                    b.HasData(
                        new
                        {
                            AppointmentTypeId = 1,
                            ClientId = new Guid("e8094495-8504-422d-87b0-29c9baf4df7e"),
                            Description = "Business Meeting",
                            Name = "Business Meeting"
                        });
                });

            modelBuilder.Entity("CustomerServiceApi.Models.Client", b =>
                {
                    b.Property<Guid>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("ClientTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EnteredBy")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("ClientId");

                    b.HasIndex("ClientTypeId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientId = new Guid("e8094495-8504-422d-87b0-29c9baf4df7e"),
                            Active = false,
                            ClientName = "default-client",
                            ClientTypeId = 6,
                            CreatedDate = new DateTime(2024, 6, 18, 20, 0, 22, 62, DateTimeKind.Utc).AddTicks(3127),
                            EnteredBy = "system"
                        },
                        new
                        {
                            ClientId = new Guid("55136886-37df-4188-b5ea-0e74958e627c"),
                            Active = true,
                            ClientName = "Awesome Resort",
                            ClientTypeId = 2,
                            CreatedDate = new DateTime(2024, 6, 18, 20, 0, 22, 62, DateTimeKind.Utc).AddTicks(3218),
                            EnteredBy = "system"
                        },
                        new
                        {
                            ClientId = new Guid("4cc3d613-57ff-4fc8-8d7d-b908678769d2"),
                            Active = true,
                            ClientName = "Wa Wa Campgounds",
                            ClientTypeId = 6,
                            CreatedDate = new DateTime(2024, 6, 18, 20, 0, 22, 62, DateTimeKind.Utc).AddTicks(3222),
                            EnteredBy = "system"
                        },
                        new
                        {
                            ClientId = new Guid("53f8d078-11a1-4089-9ab3-39dbf72425d9"),
                            Active = true,
                            ClientName = "Little Ones Daycare",
                            ClientTypeId = 2,
                            CreatedDate = new DateTime(2024, 6, 18, 20, 0, 22, 62, DateTimeKind.Utc).AddTicks(3226),
                            EnteredBy = "system"
                        },
                        new
                        {
                            ClientId = new Guid("11270c83-4a0c-40f9-bbc5-6b6894d9d95d"),
                            Active = true,
                            ClientName = "Best Lawncare",
                            ClientTypeId = 7,
                            CreatedDate = new DateTime(2024, 6, 18, 20, 0, 22, 62, DateTimeKind.Utc).AddTicks(3229),
                            EnteredBy = "system"
                        },
                        new
                        {
                            ClientId = new Guid("50cf2794-76c4-4f35-8692-27bfbbfffee7"),
                            Active = false,
                            ClientName = "Down The Road Motel",
                            ClientTypeId = 5,
                            CreatedDate = new DateTime(2024, 6, 18, 20, 0, 22, 62, DateTimeKind.Utc).AddTicks(3233),
                            EnteredBy = "system"
                        },
                        new
                        {
                            ClientId = new Guid("9bfbf657-4ede-4e6c-94fe-ed5c1764af28"),
                            Active = true,
                            ClientName = "Testing of The Person Tracking",
                            ClientTypeId = 1,
                            CreatedDate = new DateTime(2024, 6, 18, 20, 0, 22, 62, DateTimeKind.Utc).AddTicks(3238),
                            EnteredBy = "system"
                        });
                });

            modelBuilder.Entity("CustomerServiceApi.Models.ClientFeature", b =>
                {
                    b.Property<int>("ClientFeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClientFeatureId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("EnteredBy")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("FeatureValue")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ClientFeatureId");

                    b.ToTable("ClientFeatures");
                });

            modelBuilder.Entity("CustomerServiceApi.Models.ClientFeatureLookup", b =>
                {
                    b.Property<int>("ClientFeatureLookupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClientFeatureLookupId"));

                    b.Property<int>("ClientFeatureId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.HasKey("ClientFeatureLookupId");

                    b.HasIndex("ClientFeatureId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientFeatureLookups");
                });

            modelBuilder.Entity("CustomerServiceApi.Models.ClientType", b =>
                {
                    b.Property<int>("ClientTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClientTypeId"));

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ClientTypeId");

                    b.ToTable("ClientTypes");

                    b.HasData(
                        new
                        {
                            ClientTypeId = 1,
                            Description = "Resort",
                            Name = "Resort"
                        },
                        new
                        {
                            ClientTypeId = 2,
                            Description = "Day Care",
                            Name = "Day Care"
                        },
                        new
                        {
                            ClientTypeId = 3,
                            Description = "School",
                            Name = "School"
                        },
                        new
                        {
                            ClientTypeId = 4,
                            Description = "Hotel",
                            Name = "Hotel"
                        },
                        new
                        {
                            ClientTypeId = 5,
                            Description = "Motel",
                            Name = "Motel"
                        },
                        new
                        {
                            ClientTypeId = 6,
                            Description = "Camp Ground",
                            Name = "Camp Ground"
                        },
                        new
                        {
                            ClientTypeId = 7,
                            Description = "Lawncare",
                            Name = "Lawncare"
                        });
                });

            modelBuilder.Entity("CustomerServiceApi.Models.Email", b =>
                {
                    b.Property<int>("EmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EmailId"));

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<int>("EmailTypeId")
                        .HasColumnType("integer");

                    b.HasKey("EmailId");

                    b.HasIndex("EmailTypeId");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("CustomerServiceApi.Models.EmailType", b =>
                {
                    b.Property<int>("EmailTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EmailTypeId"));

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("EmailTypeId");

                    b.HasIndex("ClientId");

                    b.ToTable("EmailTypes");

                    b.HasData(
                        new
                        {
                            EmailTypeId = 1,
                            ClientId = new Guid("e8094495-8504-422d-87b0-29c9baf4df7e"),
                            Description = "Home",
                            Name = "Home"
                        },
                        new
                        {
                            EmailTypeId = 2,
                            ClientId = new Guid("e8094495-8504-422d-87b0-29c9baf4df7e"),
                            Description = "Work",
                            Name = "Work"
                        },
                        new
                        {
                            EmailTypeId = 3,
                            ClientId = new Guid("e8094495-8504-422d-87b0-29c9baf4df7e"),
                            Description = "Junk",
                            Name = "Junk"
                        },
                        new
                        {
                            EmailTypeId = 4,
                            ClientId = new Guid("e8094495-8504-422d-87b0-29c9baf4df7e"),
                            Description = "Other",
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("CustomerServiceApi.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("Alias")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("EmployeeTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.HasKey("EmployeeId");

                    b.HasIndex("EmployeeTypeId");

                    b.HasIndex("PersonId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("CustomerServiceApi.Models.EmployeeType", b =>
                {
                    b.Property<int>("EmployeeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EmployeeTypeId"));

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("EmployeeTypeId");

                    b.HasIndex("ClientId");

                    b.ToTable("EmployeeTypes");

                    b.HasData(
                        new
                        {
                            EmployeeTypeId = 1,
                            ClientId = new Guid("e8094495-8504-422d-87b0-29c9baf4df7e"),
                            Description = "Not in a managerial position",
                            Name = "Non-management"
                        },
                        new
                        {
                            EmployeeTypeId = 2,
                            ClientId = new Guid("e8094495-8504-422d-87b0-29c9baf4df7e"),
                            Description = "Managerial position",
                            Name = "Management"
                        },
                        new
                        {
                            EmployeeTypeId = 3,
                            ClientId = new Guid("e8094495-8504-422d-87b0-29c9baf4df7e"),
                            Description = "Group leader position",
                            Name = "Lead"
                        },
                        new
                        {
                            EmployeeTypeId = 4,
                            ClientId = new Guid("e8094495-8504-422d-87b0-29c9baf4df7e"),
                            Description = "General clerical position",
                            Name = "Clerical"
                        });
                });

            modelBuilder.Entity("CustomerServiceApi.Models.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GenderId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("GenderId");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            GenderId = 1,
                            Description = "Male Person",
                            Name = "Male"
                        },
                        new
                        {
                            GenderId = 2,
                            Description = "Female Person",
                            Name = "Female"
                        },
                        new
                        {
                            GenderId = 3,
                            Description = "Unknown",
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("CustomerServiceApi.Models.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PersonId"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("GenderId")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("PersonTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("RaceId")
                        .HasColumnType("integer");

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("PersonId");

                    b.HasIndex("ClientId");

                    b.HasIndex("GenderId");

                    b.HasIndex("PersonTypeId");

                    b.HasIndex("RaceId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("CustomerServiceApi.Models.PersonAddressLookup", b =>
                {
                    b.Property<int>("PersonAddressLookupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PersonAddressLookupId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<bool>("Primary")
                        .HasColumnType("boolean");

                    b.HasKey("PersonAddressLookupId");

                    b.HasIndex("AddressId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonAddressLookups");
                });

            modelBuilder.Entity("CustomerServiceApi.Models.PersonEmailLookup", b =>
                {
                    b.Property<int>("PersonEmailLookupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PersonEmailLookupId"));

                    b.Property<int>("EmailId")
                        .HasColumnType("integer");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<bool>("Primary")
                        .HasColumnType("boolean");

                    b.HasKey("PersonEmailLookupId");

                    b.HasIndex("EmailId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonEmailLookups");
                });

            modelBuilder.Entity("CustomerServiceApi.Models.PersonPhoneLookup", b =>
                {
                    b.Property<int>("PersonPhoneLookupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PersonPhoneLookupId"));

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<int>("PhoneId")
                        .HasColumnType("integer");

                    b.Property<bool>("Primary")
                        .HasColumnType("boolean");

                    b.HasKey("PersonPhoneLookupId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PhoneId");

                    b.ToTable("PersonPhoneLookups");
                });

            modelBuilder.Entity("CustomerServiceApi.Models.PersonType", b =>
                {
                    b.Property<int>("PersonTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PersonTypeId"));

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("PersonTypeId");

                    b.HasIndex("ClientId");

                    b.ToTable("PersonTypes");

                    b.HasData(
                        new
                        {
                            PersonTypeId = 1,
                            ClientId = new Guid("e8094495-8504-422d-87b0-29c9baf4df7e"),
                            Description = "Customer",
                            Name = "Customer"
                        },
                        new
                        {
                            PersonTypeId = 2,
                            ClientId = new Guid("e8094495-8504-422d-87b0-29c9baf4df7e"),
                            Description = "Employee",
                            Name = "Employee"
                        },
                        new
                        {
                            PersonTypeId = 3,
                            ClientId = new Guid("e8094495-8504-422d-87b0-29c9baf4df7e"),
                            Description = "Guardian",
                            Name = "Guardian"
                        },
                        new
                        {
                            PersonTypeId = 4,
                            ClientId = new Guid("e8094495-8504-422d-87b0-29c9baf4df7e"),
                            Description = "Mother",
                            Name = "Mother"
                        },
                        new
                        {
                            PersonTypeId = 5,
                            ClientId = new Guid("e8094495-8504-422d-87b0-29c9baf4df7e"),
                            Description = "Father",
                            Name = "Father"
                        },
                        new
                        {
                            PersonTypeId = 6,
                            ClientId = new Guid("e8094495-8504-422d-87b0-29c9baf4df7e"),
                            Description = "Sibling",
                            Name = "Sibling"
                        },
                        new
                        {
                            PersonTypeId = 7,
                            ClientId = new Guid("e8094495-8504-422d-87b0-29c9baf4df7e"),
                            Description = "Brother",
                            Name = "Brother"
                        },
                        new
                        {
                            PersonTypeId = 8,
                            ClientId = new Guid("e8094495-8504-422d-87b0-29c9baf4df7e"),
                            Description = "Sister",
                            Name = "Sister"
                        });
                });

            modelBuilder.Entity("CustomerServiceApi.Models.Phone", b =>
                {
                    b.Property<int>("PhoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PhoneId"));

                    b.Property<string>("Extension")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("PhoneTypeId")
                        .HasColumnType("integer");

                    b.HasKey("PhoneId");

                    b.HasIndex("PhoneTypeId");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("CustomerServiceApi.Models.PhoneType", b =>
                {
                    b.Property<int>("PhoneTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PhoneTypeId"));

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("PhoneTypeId");

                    b.HasIndex("ClientId");

                    b.ToTable("PhoneTypes");

                    b.HasData(
                        new
                        {
                            PhoneTypeId = 1,
                            ClientId = new Guid("e8094495-8504-422d-87b0-29c9baf4df7e"),
                            Description = "Cell",
                            Name = "Cell"
                        },
                        new
                        {
                            PhoneTypeId = 2,
                            ClientId = new Guid("e8094495-8504-422d-87b0-29c9baf4df7e"),
                            Description = "Work",
                            Name = "Work"
                        },
                        new
                        {
                            PhoneTypeId = 3,
                            ClientId = new Guid("e8094495-8504-422d-87b0-29c9baf4df7e"),
                            Description = "Home",
                            Name = "Home"
                        },
                        new
                        {
                            PhoneTypeId = 4,
                            ClientId = new Guid("e8094495-8504-422d-87b0-29c9baf4df7e"),
                            Description = "Other",
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("CustomerServiceApi.Models.Race", b =>
                {
                    b.Property<int>("RaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RaceId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("RaceId");

                    b.ToTable("Races");

                    b.HasData(
                        new
                        {
                            RaceId = 1,
                            Description = "Caucasian ",
                            Name = "Caucasian "
                        },
                        new
                        {
                            RaceId = 2,
                            Description = "African American ",
                            Name = "African American"
                        },
                        new
                        {
                            RaceId = 3,
                            Description = "Hispanic",
                            Name = "Hispanic"
                        },
                        new
                        {
                            RaceId = 4,
                            Description = "Asian",
                            Name = "Asian"
                        },
                        new
                        {
                            RaceId = 5,
                            Description = "Other",
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("CustomerServiceApi.Models.States", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StateId"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("StateId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CustomerServiceApi.Models.Address", b =>
                {
                    b.HasOne("CustomerServiceApi.Models.AddressType", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerServiceApi.Models.States", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressType");

                    b.Navigation("State");
                });

            modelBuilder.Entity("CustomerServiceApi.Models.AddressType", b =>
                {
                    b.HasOne("CustomerServiceApi.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("CustomerServiceApi.Models.Appointment", b =>
                {
                    b.HasOne("CustomerServiceApi.Models.AppointmentType", "AppointmentType")
                        .WithMany()
                        .HasForeignKey("AppointmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentType");
                });

            modelBuilder.Entity("CustomerServiceApi.Models.AppointmentType", b =>
                {
                    b.HasOne("CustomerServiceApi.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("CustomerServiceApi.Models.Client", b =>
                {
                    b.HasOne("CustomerServiceApi.Models.ClientType", "ClientType")
                        .WithMany()
                        .HasForeignKey("ClientTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientType");
                });

            modelBuilder.Entity("CustomerServiceApi.Models.ClientFeatureLookup", b =>
                {
                    b.HasOne("CustomerServiceApi.Models.ClientFeature", "ClientFeature")
                        .WithMany()
                        .HasForeignKey("ClientFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerServiceApi.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ClientFeature");
                });

            modelBuilder.Entity("CustomerServiceApi.Models.Email", b =>
                {
                    b.HasOne("CustomerServiceApi.Models.EmailType", "EmailType")
                        .WithMany()
                        .HasForeignKey("EmailTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailType");
                });

            modelBuilder.Entity("CustomerServiceApi.Models.EmailType", b =>
                {
                    b.HasOne("CustomerServiceApi.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("CustomerServiceApi.Models.Employee", b =>
                {
                    b.HasOne("CustomerServiceApi.Models.EmployeeType", "EmployeeType")
                        .WithMany()
                        .HasForeignKey("EmployeeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerServiceApi.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeType");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("CustomerServiceApi.Models.EmployeeType", b =>
                {
                    b.HasOne("CustomerServiceApi.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("CustomerServiceApi.Models.Person", b =>
                {
                    b.HasOne("CustomerServiceApi.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerServiceApi.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerServiceApi.Models.PersonType", "PersonType")
                        .WithMany()
                        .HasForeignKey("PersonTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerServiceApi.Models.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Gender");

                    b.Navigation("PersonType");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("CustomerServiceApi.Models.PersonAddressLookup", b =>
                {
                    b.HasOne("CustomerServiceApi.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerServiceApi.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("CustomerServiceApi.Models.PersonEmailLookup", b =>
                {
                    b.HasOne("CustomerServiceApi.Models.Email", "Email")
                        .WithMany()
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerServiceApi.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Email");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("CustomerServiceApi.Models.PersonPhoneLookup", b =>
                {
                    b.HasOne("CustomerServiceApi.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerServiceApi.Models.Phone", "Phone")
                        .WithMany()
                        .HasForeignKey("PhoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Phone");
                });

            modelBuilder.Entity("CustomerServiceApi.Models.PersonType", b =>
                {
                    b.HasOne("CustomerServiceApi.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("CustomerServiceApi.Models.Phone", b =>
                {
                    b.HasOne("CustomerServiceApi.Models.PhoneType", "PhoneType")
                        .WithMany()
                        .HasForeignKey("PhoneTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PhoneType");
                });

            modelBuilder.Entity("CustomerServiceApi.Models.PhoneType", b =>
                {
                    b.HasOne("CustomerServiceApi.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CustomerServiceApi.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CustomerServiceApi.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerServiceApi.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CustomerServiceApi.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
